<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2011r2

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="xs fn">
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template match="/">
		<xsl:for-each select="article">
			<xsl:variable name="var1_meta" as="node()" select="meta"/>
			<xsl:for-each select="$var1_meta/doi/node()[fn:boolean(self::text())]">
				<xsl:variable name="var2_resultof_cast" as="xs:string" select="fn:string(.)"/>
				<xsl:variable name="var3_APS" as="xs:string" select="'APS'"/>
				<xsl:variable name="var4_" as="xs:string" select="''"/>
				<xsl:variable name="var5_resultof_create_attribute_with_prefix" as="node()">
					<xsl:attribute name="ind2" select="$var4_"/>
				</xsl:variable>
				<xsl:variable name="var6_resultof_create_attribute_with_prefix" as="node()">
					<xsl:attribute name="ind1" select="$var4_"/>
				</xsl:variable>
				<xsl:variable name="var7_resultof_create_attribute_with_prefix" as="node()">
					<xsl:attribute name="code" select="'2'"/>
				</xsl:variable>
				<xsl:variable name="var8_resultof_create_attribute_with_prefix" as="node()">
					<xsl:attribute name="code" select="'c'"/>
				</xsl:variable>
				<xsl:variable name="var9_resultof_create_attribute_with_prefix" as="node()">
					<xsl:attribute name="code" select="'a'"/>
				</xsl:variable>
				<xsl:variable name="var10_history" as="node()?" select="$var1_meta/history"/>
				<xsl:variable name="var11_authgrp" as="node()+" select="$var1_meta/authgrp"/>
				<xsl:variable name="var22_resultof_create_element_with_prefix" as="node()">
					<collection xmlns="http://www.loc.gov/MARC21/slim">
						<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'http://www.loc.gov/MARC21/slim C:/Users/sachs/Desktop/APS/marcxml.xsd'"/>
						<record>
							<datafield>
								<xsl:attribute name="tag" namespace="" select="'024'"/>
								<xsl:sequence select="$var5_resultof_create_attribute_with_prefix"/>
								<xsl:attribute name="ind1" namespace="" select="'7'"/>
								<subfield>
									<xsl:sequence select="($var7_resultof_create_attribute_with_prefix, 'DOI')"/>
								</subfield>
								<subfield>
									<xsl:sequence select="($var9_resultof_create_attribute_with_prefix, $var2_resultof_cast)"/>
								</subfield>
							</datafield>
							<xsl:for-each select="$var11_authgrp">
								<xsl:variable name="var16_cur" as="node()" select="."/>
								<xsl:variable name="var15_idx" as="xs:integer" select="position()"/>
								<xsl:for-each select="*:author[fn:namespace-uri() eq '']">
									<xsl:variable name="var13_cur" as="node()" select="."/>
									<xsl:variable name="var14_idx" as="xs:integer" select="position()"/>
									<xsl:for-each select="*:surname[fn:namespace-uri() eq '']">
										<xsl:variable name="var12_cur" as="node()" select="."/>
										<xsl:for-each select="$var13_cur/*:givenname[fn:namespace-uri() eq '']/node()[fn:boolean(self::text())][(($var15_idx = xs:decimal('1')) and ($var14_idx = xs:decimal('1')))]">
											<datafield>
												<xsl:attribute name="tag" namespace="" select="'100'"/>
												<xsl:sequence select="$var5_resultof_create_attribute_with_prefix"/>
												<xsl:sequence select="$var6_resultof_create_attribute_with_prefix"/>
												<subfield>
													<xsl:sequence select="($var9_resultof_create_attribute_with_prefix, fn:concat(fn:concat(fn:string($var12_cur), ', '), fn:string(.)))"/>
												</subfield>
												<xsl:for-each select="$var16_cur/*:aff[fn:namespace-uri() eq '']">
													<subfield>
														<xsl:attribute name="code" namespace="" select="'u'"/>
														<xsl:sequence select="fn:string(.)"/>
													</subfield>
												</xsl:for-each>
											</datafield>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
							<datafield>
								<xsl:attribute name="tag" namespace="" select="'245'"/>
								<xsl:sequence select="$var5_resultof_create_attribute_with_prefix"/>
								<xsl:sequence select="$var6_resultof_create_attribute_with_prefix"/>
								<subfield>
									<xsl:sequence select="($var9_resultof_create_attribute_with_prefix, fn:string($var1_meta/*:title[fn:namespace-uri() eq '']))"/>
								</subfield>
							</datafield>
							<xsl:for-each select="$var10_history/*:published[fn:namespace-uri() eq '']">
								<datafield>
									<xsl:attribute name="tag" namespace="" select="'260'"/>
									<xsl:sequence select="$var5_resultof_create_attribute_with_prefix"/>
									<xsl:sequence select="$var6_resultof_create_attribute_with_prefix"/>
									<subfield>
										<xsl:sequence select="($var8_resultof_create_attribute_with_prefix, fn:string(@date))"/>
									</subfield>
								</datafield>
							</xsl:for-each>
							<xsl:for-each select="$var1_meta/*:numpages[fn:namespace-uri() eq '']">
								<datafield>
									<xsl:attribute name="tag" namespace="" select="'300'"/>
									<xsl:sequence select="$var5_resultof_create_attribute_with_prefix"/>
									<xsl:sequence select="$var6_resultof_create_attribute_with_prefix"/>
									<xsl:for-each select="node()[fn:boolean(self::text())]">
										<subfield>
											<xsl:sequence select="($var9_resultof_create_attribute_with_prefix, fn:string(.))"/>
										</subfield>
									</xsl:for-each>
								</datafield>
							</xsl:for-each>
							<xsl:for-each select="$var1_meta/*:abstract[fn:namespace-uri() eq '']">
								<datafield>
									<xsl:attribute name="tag" namespace="" select="'520'"/>
									<xsl:sequence select="$var5_resultof_create_attribute_with_prefix"/>
									<xsl:sequence select="$var6_resultof_create_attribute_with_prefix"/>
									<xsl:for-each select="*:p[fn:namespace-uri() eq '']">
										<subfield>
											<xsl:sequence select="($var9_resultof_create_attribute_with_prefix, fn:string(.))"/>
										</subfield>
									</xsl:for-each>
									<subfield>
										<xsl:attribute name="code" namespace="" select="'9'"/>
										<xsl:sequence select="$var3_APS"/>
									</subfield>
								</datafield>
							</xsl:for-each>
							<xsl:for-each select="$var1_meta/*:pacs[fn:namespace-uri() eq '']/*:pacscode[fn:namespace-uri() eq '']">
								<datafield>
									<xsl:attribute name="tag" namespace="" select="'084'"/>
									<xsl:sequence select="$var5_resultof_create_attribute_with_prefix"/>
									<xsl:sequence select="$var6_resultof_create_attribute_with_prefix"/>
									<subfield>
										<xsl:sequence select="($var7_resultof_create_attribute_with_prefix, 'PACS')"/>
									</subfield>
									<xsl:for-each select="node()[fn:boolean(self::text())]">
										<subfield>
											<xsl:sequence select="($var9_resultof_create_attribute_with_prefix, fn:string(.))"/>
										</subfield>
									</xsl:for-each>
								</datafield>
							</xsl:for-each>
							<xsl:for-each select="$var11_authgrp">
								<xsl:variable name="var21_cur" as="node()" select="."/>
								<xsl:variable name="var20_idx" as="xs:integer" select="position()"/>
								<xsl:for-each select="*:author[fn:namespace-uri() eq '']">
									<xsl:variable name="var18_cur" as="node()" select="."/>
									<xsl:variable name="var19_idx" as="xs:integer" select="position()"/>
									<xsl:for-each select="*:surname[fn:namespace-uri() eq '']">
										<xsl:variable name="var17_cur" as="node()" select="."/>
										<xsl:for-each select="$var18_cur/*:givenname[fn:namespace-uri() eq '']/node()[fn:boolean(self::text())][fn:not((($var20_idx = xs:decimal('1')) and ($var19_idx = xs:decimal('1'))))]">
											<datafield>
												<xsl:attribute name="tag" namespace="" select="'700'"/>
												<xsl:sequence select="$var5_resultof_create_attribute_with_prefix"/>
												<xsl:sequence select="$var6_resultof_create_attribute_with_prefix"/>
												<subfield>
													<xsl:sequence select="($var9_resultof_create_attribute_with_prefix, fn:concat(fn:concat(fn:string($var17_cur), ', '), fn:string(.)))"/>
												</subfield>
												<xsl:for-each select="$var21_cur/*:aff[fn:namespace-uri() eq '']">
													<subfield>
														<xsl:attribute name="code" namespace="" select="'u'"/>
														<xsl:sequence select="fn:string(.)"/>
													</subfield>
												</xsl:for-each>
											</datafield>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
							<datafield>
								<xsl:attribute name="tag" namespace="" select="'773'"/>
								<xsl:sequence select="$var5_resultof_create_attribute_with_prefix"/>
								<xsl:sequence select="$var6_resultof_create_attribute_with_prefix"/>
								<xsl:for-each select="$var1_meta/*:eid[fn:namespace-uri() eq '']/node()[fn:boolean(self::text())]">
									<subfield>
										<xsl:sequence select="($var8_resultof_create_attribute_with_prefix, fn:string(.))"/>
									</subfield>
								</xsl:for-each>
								<xsl:for-each select="$var1_meta/*:issue[fn:namespace-uri() eq '']/node()[fn:boolean(self::text())]">
									<subfield>
										<xsl:attribute name="code" namespace="" select="'n'"/>
										<xsl:sequence select="fn:string(.)"/>
									</subfield>
								</xsl:for-each>
								<xsl:for-each select="$var1_meta/*:journal[fn:namespace-uri() eq '']/node()[fn:boolean(self::text())]">
									<subfield>
										<xsl:attribute name="code" namespace="" select="'p'"/>
										<xsl:sequence select="fn:string(.)"/>
									</subfield>
								</xsl:for-each>
								<xsl:for-each select="$var1_meta/*:volume[fn:namespace-uri() eq '']/node()[fn:boolean(self::text())]">
									<subfield>
										<xsl:attribute name="code" namespace="" select="'v'"/>
										<xsl:sequence select="fn:string(.)"/>
									</subfield>
								</xsl:for-each>
								<xsl:for-each select="$var10_history/*:published[fn:namespace-uri() eq '']">
									<subfield>
										<xsl:attribute name="code" namespace="" select="'y'"/>
										<xsl:sequence select="replace(fn:string(@date), '-.*', '')"/>
									</subfield>
								</xsl:for-each>
							</datafield>
							<datafield>
								<xsl:attribute name="tag" namespace="" select="'FFT'"/>
								<xsl:sequence select="$var5_resultof_create_attribute_with_prefix"/>
								<xsl:sequence select="$var6_resultof_create_attribute_with_prefix"/>
								<subfield>
									<xsl:sequence select="($var9_resultof_create_attribute_with_prefix, fn:concat(fn:concat(fn:concat(fn:concat('/opt/cds-invenio/var/tmp/apsharvest_unzip_E8v6_3/articlebag-', replace($var2_resultof_cast, '[./]', '-')), '-apsxml/data/'), $var2_resultof_cast), '/fulltext.xml'))"/>
								</subfield>
								<subfield>
									<xsl:attribute name="code" namespace="" select="'t'"/>
									<xsl:sequence select="$var3_APS"/>
								</subfield>
								<subfield>
									<xsl:attribute name="code" namespace="" select="'o'"/>
									<xsl:sequence select="'HIDDEN'"/>
								</subfield>
							</datafield>
							<datafield>
								<xsl:attribute name="tag" namespace="" select="'541'"/>
								<xsl:sequence select="$var5_resultof_create_attribute_with_prefix"/>
								<xsl:sequence select="$var6_resultof_create_attribute_with_prefix"/>
								<subfield>
									<xsl:sequence select="($var9_resultof_create_attribute_with_prefix, $var3_APS)"/>
								</subfield>
								<subfield>
									<xsl:sequence select="($var8_resultof_create_attribute_with_prefix, 'batchupload')"/>
								</subfield>
							</datafield>
						</record>
					</collection>
				</xsl:variable>
				<xsl:result-document href="{fn:concat(replace($var2_resultof_cast, '[/()]', '_'), '.xml')}" encoding="UTF-8">
					<xsl:sequence select="$var22_resultof_create_element_with_prefix"/>
				</xsl:result-document>
			</xsl:for-each>
		</xsl:for-each>
	</xsl:template>
</xsl:stylesheet>
